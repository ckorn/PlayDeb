==PPA_CLEAN PACKAGE==

git checkout svn
git svn rebase
export VERSION=$(git svn info | sed -n 's/Last\ Changed\ Rev:\ \([0-9]*\)/\1/p')
export PPA_VERSION=1.01+svn$VERSION-ppa1

git checkout clean
git merge svn
git rm -r bin/
git commit

git checkout debian_clean
git merge clean
git merge debian

git checkout ppa_clean
git merge debian_clean

git-dch --release --auto --new-version=$PPA_VERSION --debian-branch=ppa_clean
git commit -am "Changelog for r$VERSION PPA release"
git tag $PPA_VERSION

git-buildpackage -j2 -us -uc --git-debian-branch=ppa_clean --git-upstream-branch=clean
sudo dpkg -i ../redeclipse*"$PPA_VERSION"*.deb

# git-buildpackage clean --git-debian-branch=ppa_clean --git-upstream-branch=clean; quilt pop -a
git reset --hard && git clean -df
git-buildpackage -j2 -sa -S --git-debian-branch=ppa_clean --git-upstream-branch=clean
dput resvn ../redeclipse_"$PPA_VERSION"_source.changes

sed 's/version_to_copy_from/"$PPA_VERSION"/' "$HOME/utv/lp-promote-ppa" | python - arand/redeclipse arand/redeclipse


==IMAGE CLEANING==

find . -iname *.jpg | xargs grep -irl copyright

for i in $(find . -iname *.jpg | xargs grep -irl copyright); do jhead -purejpg $i; done

for i in $(find . -iname *.png); do if [ -n "$(identify -verbose "$i" | grep 'Profile.*bytes')" ]; then echo $i; fi; done | sed s/^..//

for i in $(git show debian:debian/unincluded_copyrights | egrep '.*\.png'); do echo mogrify -strip $i; mogrify -strip $i; done


==BACKUP==

export BACKUP_DIR="/media/seagate/utv/backup-git"
export REPO_DIR="$HOME/utv/repository"

mkdir "$BACKUP_DIR"
cd "$BACKUP_DIR"
git init --bare
git clone --mirror "$REPO_DIR"
cd "$REPO_DIR"
git remote add --mirror seagate "$BACKUP_DIR"
git push seagate


==BACKUP RECOVERY==

export BACKUP_DIR="/media/seagate/utv/backup-git"
export REPO_DIR="$HOME/utv/repository"

git clone "$BACKUP_DIR" "$REPO_DIR"
cd "$REPO_DIR"
for i in $(git branch -a | grep origin); do git checkout -b $(echo "$i" | sed 's#.*origin\/\(.*\)#\1#') "$i"; done

# Alternatively
git clone --mirror "$BACKUP_DIR" "$REPO_DIR"/.git
cd "$REPO_DIR"
git config --bool core.bare false                                         # (2)
git checkout master


==PPA PACKAGE==

git checkout svn
git svn rebase
export VERSION=$(git svn info | sed -n 's/Last\ Changed\ Rev:\ \([0-9]*\)/\1/p')
export PPA_VERSION=1.0+svn$VERSION-ppa1
git checkout ppa
git merge svn
git merge rebased
git checkout rebased -- debian/
git checkout ppa -- debian/changelog
git commit

git-dch --release --auto --new-version=$PPA_VERSION --debian-branch=ppa
#Remove the irrelevant old debian changes
git commit -am "Changelog for r$VERSION PPA release"
git tag $PPA_VERSION

git-buildpackage -j2 -us -uc --git-debian-branch=ppa --git-upstream-branch=svn
sudo dpkg -i ../redeclipse*"$PPA_VERSION"*.deb
git reset --hard && git clean -df
git-buildpackage -j2 -sa -S --git-debian-branch=ppa --git-upstream-branch=svn
dput resvn ../redeclipse_"$PPA_VERSION"_source.changes

# gnome-session-save --shutdown-dialog


PPA PACKAGE

git checkout upstream
git svn rebase
git checkout clean_upstream
git merge upstream
git rm bin/ -r
git commit
git checkout master
git merge clean_upstream

git-dch --release --auto --new-version=0.90+svn###-ppa1
git commit -am "Changelog for r### PPA release"
git tag 0.90+svn###

git-buildpackage -us -uc --git-upstream-branch=clean_upstream
git-buildpackage -sa -S --git-upstream-branch=clean_upstream
dput ppa:arand/redeclipse ../redeclipse_0.90+svn###-ppa1_source.changes && gnome-session-save --shutdown-dialog

###

COMPILE

git checkout upstream
git svn rebase
git checkout compile
git merge upstream

pushd src && make install && make clean && make clean-enet && popd

git commit -am "Compiled and cleaned"

###

COMPRESS

git fsck --full
git repack -a -d && git gc --prune

###

SNAPSHOT

git-dch --snapshot --auto --new-version=0.90+svn###-ppa1
vim debian/changelog
git commit -am "Changelog for r### snapshot"
